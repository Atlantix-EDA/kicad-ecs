// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BoardFinish {
    #[prost(string, tag = "1")]
    pub type_name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BoardImpedanceControl {
    #[prost(bool, tag = "1")]
    pub is_controlled: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BoardEdgeConnector {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Castellation {
    #[prost(bool, tag = "1")]
    pub has_castellated_pads: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EdgePlating {
    #[prost(bool, tag = "1")]
    pub has_edge_plating: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BoardEdgeSettings {
    #[prost(message, optional, tag = "1")]
    pub connector: ::core::option::Option<BoardEdgeConnector>,
    #[prost(message, optional, tag = "2")]
    pub castellation: ::core::option::Option<Castellation>,
    #[prost(message, optional, tag = "3")]
    pub plating: ::core::option::Option<EdgePlating>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BoardStackupCopperLayer {}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BoardStackupDielectricProperties {
    #[prost(double, tag = "1")]
    pub epsilon_r: f64,
    #[prost(double, tag = "2")]
    pub loss_tangent: f64,
    #[prost(string, tag = "3")]
    pub material_name: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "4")]
    pub thickness: ::core::option::Option<super::common::types::Distance>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BoardStackupDielectricLayer {
    /// A single dielectric slot (between copper layers) can be made up of multiple physical layers
    #[prost(message, repeated, tag = "1")]
    pub layer: ::prost::alloc::vec::Vec<BoardStackupDielectricProperties>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BoardStackupLayer {
    #[prost(message, optional, tag = "1")]
    pub thickness: ::core::option::Option<super::common::types::Distance>,
    #[prost(enumeration = "types::BoardLayer", tag = "2")]
    pub layer: i32,
    #[prost(bool, tag = "3")]
    pub enabled: bool,
    #[prost(enumeration = "BoardStackupLayerType", tag = "4")]
    pub r#type: i32,
    #[prost(message, optional, tag = "5")]
    pub dielectric: ::core::option::Option<BoardStackupDielectricLayer>,
    #[prost(message, optional, tag = "6")]
    pub color: ::core::option::Option<super::common::types::Color>,
    #[prost(string, tag = "7")]
    pub material_name: ::prost::alloc::string::String,
    /// The name of the layer shown in the KiCad GUI, which may be a default value like "F.Cu" or may
    /// have been customized by the user.  This field does not apply to dielectric layers.
    #[prost(string, tag = "8")]
    pub user_name: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BoardStackup {
    #[prost(message, optional, tag = "1")]
    pub finish: ::core::option::Option<BoardFinish>,
    #[prost(message, optional, tag = "2")]
    pub impedance: ::core::option::Option<BoardImpedanceControl>,
    /// NOTE: m_HasThicknessConstrains appears to be unused
    #[prost(message, optional, tag = "3")]
    pub edge: ::core::option::Option<BoardEdgeSettings>,
    #[prost(message, repeated, tag = "4")]
    pub layers: ::prost::alloc::vec::Vec<BoardStackupLayer>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BoardLayerGraphicsDefaults {
    #[prost(enumeration = "BoardLayerClass", tag = "1")]
    pub layer: i32,
    #[prost(message, optional, tag = "2")]
    pub text: ::core::option::Option<super::common::types::TextAttributes>,
    #[prost(message, optional, tag = "3")]
    pub line_thickness: ::core::option::Option<super::common::types::Distance>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GraphicsDefaults {
    #[prost(message, repeated, tag = "1")]
    pub layers: ::prost::alloc::vec::Vec<BoardLayerGraphicsDefaults>,
}
/// Anything that isn't stackup or design rules
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BoardSettings {
    /// Dimension default settings
    #[prost(message, optional, tag = "1")]
    pub graphics_defaults: ::core::option::Option<GraphicsDefaults>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BoardDesignRules {}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BoardStackupLayerType {
    BsltUnknown = 0,
    BsltCopper = 1,
    BsltDielectric = 2,
    BsltSilkscreen = 3,
    BsltSoldermask = 4,
    BsltSolderpaste = 5,
    BsltUndefined = 7,
}
impl BoardStackupLayerType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            BoardStackupLayerType::BsltUnknown => "BSLT_UNKNOWN",
            BoardStackupLayerType::BsltCopper => "BSLT_COPPER",
            BoardStackupLayerType::BsltDielectric => "BSLT_DIELECTRIC",
            BoardStackupLayerType::BsltSilkscreen => "BSLT_SILKSCREEN",
            BoardStackupLayerType::BsltSoldermask => "BSLT_SOLDERMASK",
            BoardStackupLayerType::BsltSolderpaste => "BSLT_SOLDERPASTE",
            BoardStackupLayerType::BsltUndefined => "BSLT_UNDEFINED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BSLT_UNKNOWN" => Some(Self::BsltUnknown),
            "BSLT_COPPER" => Some(Self::BsltCopper),
            "BSLT_DIELECTRIC" => Some(Self::BsltDielectric),
            "BSLT_SILKSCREEN" => Some(Self::BsltSilkscreen),
            "BSLT_SOLDERMASK" => Some(Self::BsltSoldermask),
            "BSLT_SOLDERPASTE" => Some(Self::BsltSolderpaste),
            "BSLT_UNDEFINED" => Some(Self::BsltUndefined),
            _ => None,
        }
    }
}
/// LAYER_CLASS_* in BOARD_DESIGN_SETTINGS -- needs to become an enum class
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum BoardLayerClass {
    BlcUnknown = 0,
    BlcSilkscreen = 1,
    BlcCopper = 2,
    BlcEdges = 3,
    BlcCourtyard = 4,
    BlcFabrication = 5,
    BlcOther = 6,
}
impl BoardLayerClass {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            BoardLayerClass::BlcUnknown => "BLC_UNKNOWN",
            BoardLayerClass::BlcSilkscreen => "BLC_SILKSCREEN",
            BoardLayerClass::BlcCopper => "BLC_COPPER",
            BoardLayerClass::BlcEdges => "BLC_EDGES",
            BoardLayerClass::BlcCourtyard => "BLC_COURTYARD",
            BoardLayerClass::BlcFabrication => "BLC_FABRICATION",
            BoardLayerClass::BlcOther => "BLC_OTHER",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "BLC_UNKNOWN" => Some(Self::BlcUnknown),
            "BLC_SILKSCREEN" => Some(Self::BlcSilkscreen),
            "BLC_COPPER" => Some(Self::BlcCopper),
            "BLC_EDGES" => Some(Self::BlcEdges),
            "BLC_COURTYARD" => Some(Self::BlcCourtyard),
            "BLC_FABRICATION" => Some(Self::BlcFabrication),
            "BLC_OTHER" => Some(Self::BlcOther),
            _ => None,
        }
    }
}
