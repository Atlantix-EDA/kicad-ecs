// This file is @generated by prost-build.
/// / Represents a schematic line segment, which may be a wire, bus, or graphical line
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Line {
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<super::super::common::types::Kiid>,
    #[prost(message, optional, tag = "2")]
    pub start: ::core::option::Option<super::super::common::types::Vector2>,
    #[prost(message, optional, tag = "3")]
    pub end: ::core::option::Option<super::super::common::types::Vector2>,
    /// *
    /// One of: LAYER_BUS, LAYER_WIRE, LAYER_NOTES
    #[prost(enumeration = "SchematicLayer", tag = "4")]
    pub layer: i32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Text {
    #[prost(message, optional, tag = "1")]
    pub text: ::core::option::Option<super::super::common::types::Text>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LocalLabel {
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<super::super::common::types::Kiid>,
    #[prost(message, optional, tag = "2")]
    pub position: ::core::option::Option<super::super::common::types::Vector2>,
    #[prost(message, optional, tag = "3")]
    pub text: ::core::option::Option<Text>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GlobalLabel {
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<super::super::common::types::Kiid>,
    #[prost(message, optional, tag = "2")]
    pub position: ::core::option::Option<super::super::common::types::Vector2>,
    #[prost(message, optional, tag = "3")]
    pub text: ::core::option::Option<Text>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct HierarchicalLabel {
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<super::super::common::types::Kiid>,
    #[prost(message, optional, tag = "2")]
    pub position: ::core::option::Option<super::super::common::types::Vector2>,
    #[prost(message, optional, tag = "3")]
    pub text: ::core::option::Option<Text>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DirectiveLabel {
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<super::super::common::types::Kiid>,
    #[prost(message, optional, tag = "2")]
    pub position: ::core::option::Option<super::super::common::types::Vector2>,
    #[prost(message, optional, tag = "3")]
    pub text: ::core::option::Option<Text>,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SchematicLayer {
    SlUnknown = 0,
}
impl SchematicLayer {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            SchematicLayer::SlUnknown => "SL_UNKNOWN",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SL_UNKNOWN" => Some(Self::SlUnknown),
            _ => None,
        }
    }
}
